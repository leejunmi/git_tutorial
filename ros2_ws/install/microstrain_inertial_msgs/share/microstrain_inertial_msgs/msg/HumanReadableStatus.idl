// generated from rosidl_adapter/resource/msg.idl.em
// with input from microstrain_inertial_msgs/msg/HumanReadableStatus.msg
// generated code does not contain a copyright notice

#include "microstrain_inertial_msgs/msg/MipBaseDeviceInfo.idl"
#include "std_msgs/msg/Header.idl"

module microstrain_inertial_msgs {
  module msg {
    module HumanReadableStatus_Constants {
      @verbatim (language="comment", text=
        "Possible value for any field if a devicedoes not support it")
      const string UNSUPPORTED = "Unsupported";
      @verbatim (language="comment", text=
        "Possible values for gnss_state")
      const string GNSS_STATE_NO_FIX = "No Fix";
      const string GNSS_STATE_3D_FIX = "3D Fix";
      const string GNSS_STATE_SBAS = "SBAS";
      const string GNSS_STATE_RTK_FLOAT = "RTK Float";
      const string GNSS_STATE_RTK_FIXED = "RTK Fixed";
      @verbatim (language="comment", text=
        "Possible values for dual_antenna_fix_type")
      const string DUAL_ANTENNA_FIX_TYPE_NONE = "None";
      const string DUAL_ANTENNA_FIX_TYPE_FLOAT = "Dual Antenna Float";
      const string DUAL_ANTENNA_FIX_TYPE_FIXED = "Dual Antenna Fixed";
      @verbatim (language="comment", text=
        "Possible values for filter_state when the connected device is a philo device (GX5, CX5, CV5, etc)")
      const string FILTER_STATE_GX5_STARTUP = "Startup";
      const string FILTER_STATE_GX5_INIT = "Init";
      const string FILTER_STATE_GX5_RUN_SOLUTION_VALID = "Solution Valid";
      const string FILTER_STATE_GX5_RUN_SOLUTION_ERROR = "Solution Error";
      @verbatim (language="comment", text=
        "Possible values for filter_state when the connected device is a prospect device (GQ7, CV7, etc)")
      const string FILTER_STATE_GQ7_INIT = "Init";
      const string FILTER_STATE_GQ7_VERT_GYRO = "Vertical Gyro";
      const string FILTER_STATE_GQ7_AHRS = "AHRS";
      const string FILTER_STATE_GQ7_FULL_NAV = "Full Nav";
      @verbatim (language="comment", text=
        "Possible values to be stored in status_flags when the connected device is a philo device (GX5, CX5, CV5, etc)")
      const string STATUS_FLAGS_GX5_INIT_NO_ATTITUDE = "Init No Attitude";
      const string STATUS_FLAGS_GX5_INIT_NO_POSITION_VELOCITY = "Init No Position / Velocity";
      const string STATUS_FLAGS_GX5_RUN_IMU_UNAVAILABLE = "IMU Unavailable";
      const string STATUS_FLAGS_GX5_RUN_GPS_UNAVAILABLE = "GPS Unavailable";
      const string STATUS_FLAGS_GX5_RUN_MATRIX_SINGULARITY = "Matrix Singularity";
      const string STATUS_FLAGS_GX5_RUN_POSITION_COVARIANCE_WARNING = "Position Covariance Warning";
      const string STATUS_FLAGS_GX5_RUN_VELOCITY_COVARIANCE_WARNING = "Velocity Covariance Warning";
      const string STATUS_FLAGS_GX5_RUN_ATTITUDE_COVARIANCE_WARNING = "Attitude Covariance Warning";
      const string STATUS_FLAGS_GX5_RUN_NAN_IN_SOLUTION_WARNING = "NaN in Solution";
      const string STATUS_FLAGS_GX5_RUN_GYRO_BIAS_EST_HIGH_WARNING = "Gyroscope Bias Estimate High";
      const string STATUS_FLAGS_GX5_RUN_ACCEL_BIAS_EST_HIGH_WARNING = "Accelerometer Bias Estimate High";
      const string STATUS_FLAGS_GX5_RUN_GYRO_SCALE_FACTOR_EST_HIGH_WARNING = "Gyroscope Scale Factor Estimate High";
      const string STATUS_FLAGS_GX5_RUN_ACCEL_SCALE_FACTOR_EST_HIGH_WARNING = "Accelerometer Scal Factor Estimate High";
      const string STATUS_FLAGS_GX5_RUN_MAG_BIAS_EST_HIGH_WARNING = "Magnetometer Bias Estimate High";
      const string STATUS_FLAGS_GX5_RUN_ANT_OFFSET_CORRECTION_EST_HIGH_WARNING = "Antenna Offset Correction Estimate High";
      const string STATUS_FLAGS_GX5_RUN_MAG_HARD_IRON_EST_HIGH_WARNING = "Magnetometer Hard Iron Estimate High";
      const string STATUS_FLAGS_GX5_RUN_MAG_SOFT_IRON_EST_HIGH_WARNING = "Magnetometer Soft Iron Estimate High";
      @verbatim (language="comment", text=
        "Possible values to be stored in status_flags when the connected device is a prospect device (GQ7, CV7, etc)")
      const string STATUS_FLAGS_GQ7_FILTER_CONDITION_STABLE = "Stable";
      const string STATUS_FLAGS_GQ7_FILTER_CONDITION_CONVERGING = "Converging";
      const string STATUS_FLAGS_GQ7_FILTER_CONDITION_UNSTABLE = "Unstable";
      const string STATUS_FLAGS_GQ7_ROLL_PITCH_WARNING = "Roll / Pitch Warning";
      const string STATUS_FLAGS_GQ7_HEADING_WARNING = "Heading Warning";
      const string STATUS_FLAGS_GQ7_POSITION_WARNING = "Position Warning";
      const string STATUS_FLAGS_GQ7_VELOCITY_WARNING = "Velocity Warning";
      const string STATUS_FLAGS_GQ7_IMU_BIAS_WARNING = "IMU Bias Warning";
      const string STATUS_FLAGS_GQ7_GNSS_CLK_WARNING = "GNSS Clock Warning";
      const string STATUS_FLAGS_GQ7_ANTENNA_LEVER_ARM_WARNING = "Antenna Lever Arm Warning";
      const string STATUS_FLAGS_GQ7_MOUNTING_TRANSFORM_WARNING = "Mounting Transform Warning";
      const string STATUS_FLAGS_GQ7_TIME_SYNC_WARNING = "Time Sync Warning";
      const string STATUS_FLAGS_GQ7_SOLUTION_ERROR = "Solution Error";
      @verbatim (language="comment", text=
        "Possible values to be stored in continuous_bit_flags when the connected device is a GQ7" "\n"        "See https://files.microstrain.com/GQ7+User+Manual/user_manual_content/additional_features/Built-in%20Test.htm for more information")
      const string CONTINUOUS_BIT_FLAGS_GQ7_SYSTEM_CLOCK_FAILURE = "System Clock Failure";
      const string CONTINUOUS_BIT_FLAGS_GQ7_POWER_FAULT = "Power Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FIRMWARE_FAULT = "Firmware Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_TIMING_OVERLOAD = "Timing Overload";
      const string CONTINUOUS_BIT_FLAGS_GQ7_BUFFER_OVERRUN = "Buffer Overrun";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_IPC_FAULT = "IMU IPC Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FILTER_IPC_FAULT = "Filter IPC Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_IPC_FAULT = "GNSS IPC Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_CLOCK_FAULT = "IMU Clock Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_COMMUNICATION_FAULT = "IMU Communication Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_TIMING_OVERRUN = "IMU Timing Overrun";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_CALIBRATION_ERROR_ACCEL = "IMU Calibration Error - Accel";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_CALIBRATION_ERROR_GYRO = "IMU Calibration Error - Gyro";
      const string CONTINUOUS_BIT_FLAGS_GQ7_IMU_CALIBRATION_ERROR_MAG = "IMU Calibration Error - Mag";
      const string CONTINUOUS_BIT_FLAGS_GQ7_ACCELEROMETER_GENERAL_FAULT = "Accelerometer General Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_ACCELEROMETER_OVER_RANGE = "Accelerometer Over-Range";
      const string CONTINUOUS_BIT_FLAGS_GQ7_ACCELEROMETER_SELF_TEST_FAIL = "Accelerometer Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GYROSCOPE_GENERAL_FAULT = "Gyroscope General Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GYROSCOPE_OVER_RANGE = "Gyroscope Over-Range";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GYROSCOPE_SELF_TEST_FAIL = "Gyroscope Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_GQ7_MAGNETOMETER_GENERAL_FAULT = "Magnetometer General Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_MAGNETOMETER_OVER_RANGE = "Magnetometer Over-Range";
      const string CONTINUOUS_BIT_FLAGS_GQ7_MAGNETOMETER_SELF_TEST_FAIL = "Magnetometer Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_GQ7_PRESSURE_SENSOR_GENERAL_FAULT = "Pressure Sensor General Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_PRESSURE_SENSOR_OVER_RANGE = "Pressure Sensor Over-Range";
      const string CONTINUOUS_BIT_FLAGS_GQ7_PRESSURE_SENSOR_SELF_TEST_FAIL = "Pressure Sensor Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FILTER_CLOCK_FAULT = "Filter Clock Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FILTER_HARDWARE_FAULT = "Filter Hardware Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FILTER_TIMING_OVERRUN = "Filter Timing Overrun";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FILTER_TIMING_UNDERRUN = "Filter Timing Underrun";
      const string CONTINUOUS_BIT_FLAGS_GQ7_FILTER_COMMUNICATION_ERROR = "Filter Communication Error";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_CLOCK_FAULT = "GNSS Clock Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_HARDWARE_FAULT = "GNSS Hardware Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_COMMUNICATION_ERROR = "GNSS Communication Error";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GPS_TIME_FAULT = "GPS Time Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_TIMING_OVERRUN = "GNSS Timing Overrun";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_RECEIVER_1_POWER_FAULT = "GNSS Receiver 1 Power Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_RECEIVER_1_FAULT = "GNSS Receiver 1 Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_ANTENNA_1_SHORTED = "GNSS Antenna 1 Shorted";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_ANTENNA_1_OPEN = "GNSS Antenna 1 Open";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_RECEIVER_1_SOLUTION_FAULT = "GNSS Receiver 1 Solution Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_RECEIVER_2_POWER_FAULT = "GNSS Receiver 2 Power Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_RECEIVER_2_FAULT = "GNSS Receiver 2 Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_ANTENNA_2_SHORTED = "GNSS Antenna 2 Shorted";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_ANTENNA_2_OPEN = "GNSS Antenna 2 Open";
      const string CONTINUOUS_BIT_FLAGS_GQ7_GNSS_RECEIVER_2_SOLUTION_FAULT = "GNSS Receiver 2 Solution Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_RTCM_COMMUNICATION_FAULT = "RTCM Communication Fault";
      const string CONTINUOUS_BIT_FLAGS_GQ7_RTK_DONGLE_FAULT = "RTK Dongle Fault";
      @verbatim (language="comment", text=
        "Possible values to be stored in continuous_bit_flags when the device is a CV7" "\n"        "See https://files.microstrain.com/CV7+Online/user_manual_content/additional_features/Built-in%20Test.htm?Highlight=built%20in%20test for more information")
      const string CONTINUOUS_BIT_FLAGS_CV7_SYSTEM_CLOCK_FAILURE = "System Clock Failure";
      const string CONTINUOUS_BIT_FLAGS_CV7_POWER_FAULT = "Power Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_FIRMWARE_FAULT = "Firmware Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_TIMING_OVERLOAD = "Timing Overload";
      const string CONTINUOUS_BIT_FLAGS_CV7_BUFFER_OVERRUN = "Buffer Overrun";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_PROCESS_FAULT = "IMU Process Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_DATA_RATE_MISMATCH = "IMU Data Rate Mismatch";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_OVERRUN_DROPPED_DATA = "IMU Overrun/Dropped Data";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_STUCK = "IMU Stuck";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_PROCESS_FAULT = "Filter Process Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_DROPPED_DATA = "Filter Dropped Data";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_RATE_MISMATCH = "Filter Rate Mismatch";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_STUCK = "Filter Stuck";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_CLOCK_FAULT = "IMU Clock Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_COMMUNICATION_FAULT = "IMU Communication Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_TIMING_OVERRUN = "IMU Timing Overrun";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_CALIBRATION_ERROR_ACCELEROMETER = "IMU Calibration Error - Accelerometer";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_CALIBRATION_ERROR_GYROSCOPE = "IMU Calibration Error - Gyroscope";
      const string CONTINUOUS_BIT_FLAGS_CV7_IMU_CALIBRATION_ERROR_MAGNETOMETER = "IMU Calibration Error - Magnetometer";
      const string CONTINUOUS_BIT_FLAGS_CV7_ACCELEROMETER_GENERAL_FAULT = "Accelerometer General Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_ACCELEROMETER_OVER_RANGE = "Accelerometer Over-range";
      const string CONTINUOUS_BIT_FLAGS_CV7_ACCELEROMETER_SELF_TEST_FAIL = "Accelerometer Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_CV7_GYROSCOPE_GENERAL_FAULT = "Gyroscope General Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_GYROSCOPE_OVER_RANGE = "Gyroscope Over-range";
      const string CONTINUOUS_BIT_FLAGS_CV7_GYROSCOPE_SELF_TEST_FAIL = "Gyroscope Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_CV7_MAGNETOMETER_GENERAL_FAULT = "Magnetometer General Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_MAGNETOMETER_OVER_RANGE = "Magnetometer Over-range";
      const string CONTINUOUS_BIT_FLAGS_CV7_MAGNETOMETER_SELF_TEST_FAIL = "Magnetometer Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_CV7_PRESSURE_SENSOR_GENERAL_FAULT = "Pressure Sensor General Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_PRESSURE_SENSOR_OVER_RANGE = "Pressure Sensor Over-range";
      const string CONTINUOUS_BIT_FLAGS_CV7_PRESSURE_SENSOR_SELF_TEST_FAIL = "Pressure Sensor Self-test Fail";
      const string CONTINUOUS_BIT_FLAGS_CV7_FACTORY_BITS_INVALID = "Factory Bits Invalid";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_FAULT = "Filter Fault";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_TIMING_OVERRUN = "Filter Timing Overrun";
      const string CONTINUOUS_BIT_FLAGS_CV7_FILTER_TIMING_UNDERRUN = "Filter Timing Underrun";
    };
    @verbatim (language="comment", text=
      "Convenience message to contain some useful device information" "\n"
      "" "\n"
      "This is a combination of several different messages to allow for an easy view of the device status." "\n"
      "For more detailed information on the device status, see the messages mentioned in the field definitions below." "\n"
      "" "\n"
      "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" "\n"
      "NOTE: This is meant as a useful tool for checking general status of the device by a human." "\n"
      "      This interface may change without a major version upgrade." "\n"
      "      It is STRONGLY encouraged to not use this to actually control real logic." "\n"
      "      For that, we would recommend looking at the other messages mentioned in this one" "\n"
      "      as well as the uncertainty for measurements" "\n"
      "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    struct HumanReadableStatus {
      @verbatim (language="comment", text=
        "Header containing the time at which this message was populated" "\n"
        "  header.frame_id will contain the frame ID of the IMU")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Device information. This information will be read when the node first activates." "\n"
        "To force an update of this information (shouldn't change during runtime), call the mip/base/get_device_information service")
      microstrain_inertial_msgs::msg::MipBaseDeviceInfo device_info;

      @verbatim (language="comment", text=
        "GNSS state. See GNSS_STATE_* for possible values" "\n"
        "This value is computed from many different fields from microstrain_inertial_msgs/MipGnssFixInfo.msg and microstrain_inertial_msgs/MipFilterGnssPositionAidingStatus.msg")
      string gnss_state;

      @verbatim (language="comment", text=
        "Dual antenna fix type. See DUAL_ANTENNA_FIX_TYPE_* enums for possble values" "\n"
        "This is identical to fix_type in microstrain_inertial_msgs/MipFilterGnssDualAntennaStatus.msg")
      string dual_antenna_fix_type;

      @verbatim (language="comment", text=
        "Device-specific filter state. See filter_state_* enums for possible values" "\n"
        "This is identical to filter_state in microstrain_inertial_msgs/MipFilterStatus.msg represented as a string")
      string filter_state;

      @verbatim (language="comment", text=
        "String version of the status_flags field of the MipFilterStatus message. Only active statuses will be in this list" "\n"
        "This is a list of all of the status_flags_* that are true in microstrain_inertial_msgs/MipFilterStatus.msg filtered to only include relevant flags for this type of device" "\n"
        "See STATIS_FLAG_* for possible values that could be in this array")
      sequence<string> status_flags;

      @verbatim (language="comment", text=
        "String version of the possible continuous bit fields possibly provided by the device." "\n"
        "Generally, you want to see nothing populated in this message, but when you do see something, it can be used to diagnose problems with the device." "\n"
        "This is a parsed out version of microstrain_inertial_msgs/MipSystemBuiltInTest.msg parsed to be accurate for each device")
      sequence<string> continuous_bit_flags;
    };
  };
};
